import React, { useState } from 'react';
import { Form, FormOutput } from '../../types/aiTypes';
import { motion, AnimatePresence } from 'framer-motion';
import Button from '../ui/NewButton';
import {
  FileText,
  Mail,
  MessageSquare,
  ArrowRight,
  Plus,
  Trash2,
  FileCode,
  Wand2,
  Save,
} from 'lucide-react';
import ReactMarkdown from 'react-markdown';

interface GoImpactProps {
  form: Form;
  onUpdate: (updatedForm: Form) => void;
  onSave?: () => void;
}

const GoImpact: React.FC<GoImpactProps> = ({ form, onUpdate, onSave }) => {
  const [activeOutput, setActiveOutput] = useState<FormOutput | null>(null);
  const [showMarkdown, setShowMarkdown] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);

  const outputTypes = [
    { type: 'message', label: 'Message', icon: <MessageSquare size={16} /> },
    { type: 'redirect', label: 'Redirect', icon: <ArrowRight size={16} /> },
    { type: 'summary', label: 'Summary', icon: <FileText size={16} /> },
    { type: 'email', label: 'Email', icon: <Mail size={16} /> },
    { type: 'pdf', label: 'PDF Report', icon: <FileText size={16} /> },
  ];

  const addOutput = (type: FormOutput['type']) => {
    const newOutput: FormOutput = {
      type,
      template: '',
      content: {
        title: '',
        body: '',
        footer: '',
        branding: true,
      },
    };

    onUpdate({
      ...form,
      outputs: [...(form.outputs || []), newOutput],
    });
  };

  const updateOutput = (index: number, updatedOutput: FormOutput) => {
    const outputs = [...(form.outputs || [])];
    outputs[index] = updatedOutput;
    onUpdate({
      ...form,
      outputs,
    });
  };

  const deleteOutput = (index: number) => {
    const outputs = form.outputs?.filter((_, i) => i !== index) || [];
    onUpdate({
      ...form,
      outputs,
    });
  };

  const generateAIContent = async (output: FormOutput) => {
    setIsGenerating(true);
    try {
      // Simulate AI generation for now
      const generatedContent = {
        title: `${form.title} Results`,
        body: `Thank you for completing the ${form.title}.\n\nHere's your personalized feedback based on your responses...`,
        footer: 'Generated by goForms.ai',
      };

      const updatedOutput = {
        ...output,
        content: {
          ...output.content,
          ...generatedContent,
        },
      };

      const outputIndex = form.outputs?.findIndex(o => o === output) || 0;
      updateOutput(outputIndex, updatedOutput);
    } catch (error) {
      console.error('Error generating content:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-8">
      <div className="space-y-6">
        <div className="bg-white rounded-xl border border-gray-200 shadow-sm p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-lg font-semibold">Form Outputs</h2>
            <Button
              variant="primary"
              size="sm"
              leftIcon={<Save size={16} />}
              onClick={onSave}
            >
              Save
            </Button>
          </div>

          <div className="space-y-4">
            {form.outputs?.map((output, index) => (
              <div
                key={index}
                className="border border-gray-200 rounded-lg p-4 hover:border-blue-500 transition-colors cursor-pointer"
                onClick={() => setActiveOutput(output)}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    {outputTypes.find(t => t.type === output.type)?.icon}
                    <span className="font-medium capitalize">{output.type}</span>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    leftIcon={<Trash2 size={14} />}
                    onClick={(e) => {
                      e.stopPropagation();
                      deleteOutput(index);
                    }}
                  >
                    Remove
                  </Button>
                </div>
                {output.content?.title && (
                  <div className="mt-2 text-sm text-gray-600">
                    {output.content.title}
                  </div>
                )}
              </div>
            ))}

            <div className="mt-4">
              <div className="text-sm font-medium text-gray-700 mb-2">Add Output</div>
              <div className="grid grid-cols-2 gap-2">
                {outputTypes.map((type) => (
                  <button
                    key={type.type}
                    onClick={() => addOutput(type.type)}
                    className="flex items-center space-x-2 p-2 hover:bg-gray-50 rounded-lg w-full text-left transition-colors"
                  >
                    <span className="p-1.5 bg-gray-100 rounded-md text-gray-600">
                      {type.icon}
                    </span>
                    <span className="text-sm font-medium text-gray-700">{type.label}</span>
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      <AnimatePresence>
        {activeOutput && (
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 20 }}
            className="bg-white rounded-xl border border-gray-200 shadow-sm p-6"
          >
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-lg font-semibold capitalize">{activeOutput.type} Output</h3>
              <div className="flex space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  leftIcon={showMarkdown ? <FileText size={14} /> : <FileCode size={14} />}
                  onClick={() => setShowMarkdown(!showMarkdown)}
                >
                  {showMarkdown ? 'Preview' : 'Markdown'}
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  leftIcon={<Wand2 size={14} />}
                  onClick={() => generateAIContent(activeOutput)}
                  isLoading={isGenerating}
                >
                  Generate
                </Button>
              </div>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Title
                </label>
                <input
                  type="text"
                  value={activeOutput.content?.title || ''}
                  onChange={(e) => {
                    const index = form.outputs?.findIndex(o => o === activeOutput) || 0;
                    updateOutput(index, {
                      ...activeOutput,
                      content: {
                        ...activeOutput.content,
                        title: e.target.value,
                      },
                    });
                  }}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Content
                </label>
                {showMarkdown ? (
                  <textarea
                    value={activeOutput.content?.body || ''}
                    onChange={(e) => {
                      const index = form.outputs?.findIndex(o => o === activeOutput) || 0;
                      updateOutput(index, {
                        ...activeOutput,
                        content: {
                          ...activeOutput.content,
                          body: e.target.value,
                        },
                      });
                    }}
                    className="w-full h-64 p-2 font-mono text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                ) : (
                  <div className="border border-gray-300 rounded-lg p-4 h-64 overflow-y-auto prose prose-sm">
                    <ReactMarkdown>{activeOutput.content?.body || ''}</ReactMarkdown>
                  </div>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Footer
                </label>
                <input
                  type="text"
                  value={activeOutput.content?.footer || ''}
                  onChange={(e) => {
                    const index = form.outputs?.findIndex(o => o === activeOutput) || 0;
                    updateOutput(index, {
                      ...activeOutput,
                      content: {
                        ...activeOutput.content,
                        footer: e.target.value,
                      },
                    });
                  }}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              {activeOutput.type === 'pdf' && (
                <div className="mt-4">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={activeOutput.content?.branding}
                      onChange={(e) => {
                        const index = form.outputs?.findIndex(o => o === activeOutput) || 0;
                        updateOutput(index, {
                          ...activeOutput,
                          content: {
                            ...activeOutput.content,
                            branding: e.target.checked,
                          },
                        });
                      }}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <span className="ml-2 text-sm text-gray-700">Include goForms.ai branding</span>
                  </label>
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default GoImpact;